#!/usr/bin/env python

# Try not to import anything that's dependent on this file's location, since
# it should be able to be run independently without any other python files.
import argparse
import subprocess
import os
import re

class IdentifyAccountForms(object):

    pdfbox = ["java", "-jar", "pdfbox.jar"]
    strings = ["strings"]

    # A fast trigger word
    raise Exception(
                'REPLACE THIS LINE WITH SOMETHING LIKE: keyword = "cs162"')
    keyword = "YOUR CLASS NAME HERE"

    # A slower regular expression, with a 'login' capture group
    login_expression = re.compile(keyword + r"-(?P<login>[a-z]+)@imail\.eecs")

    def start_process(self, args, collect_output=False):
        if collect_output:
            io_stream = subprocess.PIPE
        else:
            io_stream = None
        process = subprocess.Popen(args,
                stdin=io_stream,
                stdout=io_stream,
                stderr=io_stream)
        return process

    def split_pdfs(self, pdfs):
        map(self.split_pdf, pdfs)

    def split_pdf(self, pdf):
        self.start_process(self.pdfbox + ["PDFSplit", pdf])

    def rename_pdfs(self, pdfs):
        map(self.rename_pdf, pdfs)

    def rename_pdf(self, pdf):
        identity = self.identify_pdf(pdf)
        source_path = os.path.abspath(pdf)
        target_path = os.path.join(os.path.dirname(source_path), "%s.pdf" % identity)
        os.rename(source_path, target_path)

    def identify_pdfs(self, pdfs):
        for pdf in pdfs:
            print pdf, self.identify_pdf(pdf)

    def identify_pdf(self, pdf):
        process = self.start_process(self.strings + [pdf], collect_output=True)
        while True:
            line = process.stdout.readline()
            if self.keyword in line:
                match = self.login_expression.search(line)
                if match:
                    return match.group("login")
        raise IdentifyAccountFormsError("Couldn't identify this account for: %s" % pdf)

class IdentifyAccountFormsError(Exception):
    pass

if __name__ == "__main__":
    identify_account_forms = IdentifyAccountForms()
    actions = {
            "split": identify_account_forms.split_pdfs,
            "rename": identify_account_forms.rename_pdfs,
            "identify": identify_account_forms.identify_pdfs,
            }

    parser = argparse.ArgumentParser()
    parser.add_argument('action',
            choices=actions.keys(),
            help='Action to perform with pdfs.')
    parser.add_argument('pdfs',
            nargs=argparse.REMAINDER)
    args = parser.parse_args()

    actions[args.action](args.pdfs)
